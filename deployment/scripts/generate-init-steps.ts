#!/usr/bin/env bun

import { readFile, writeFile } from 'fs/promises'
import { join } from 'path'

async function loadEnvVariables(): Promise<Record<string, string>> {
  const envPath = join(process.cwd(), '.env')
  
  try {
    const envContent = await readFile(envPath, 'utf-8')
    const env: Record<string, string> = {}
    
    for (const line of envContent.split('\n')) {
      const trimmed = line.trim()
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=')
        if (key && valueParts.length > 0) {
          // Remove quotes from value
          let value = valueParts.join('=')
          if ((value.startsWith('"') && value.endsWith('"')) || 
              (value.startsWith("'") && value.endsWith("'"))) {
            value = value.slice(1, -1)
          }
          env[key] = value
        }
      }
    }
    
    return env
  } catch {
    throw new Error('.env file not found. Run `bun run setup:env` first.')
  }
}

async function generateInitSteps(): Promise<void> {
  console.log('üìù Generating init-steps.yaml with environment-specific configuration...')
  
  const env = await loadEnvVariables()
  
  // Get configuration from environment with defaults
  const projectName = env.PROJECT_NAME || 'myapp'
  const authDomain = env.AUTH_DOMAIN || 'auth.localhost'
  
  const initStepsContent = `# Generated init configuration for ${projectName}
# DO NOT EDIT - This file is automatically generated from .env configuration

FirstInstance:
  InstanceName: "${projectName}"
  # Organization configuration
  Org:
    Name: "${projectName}"
    # Projects and OIDC Applications (cannot be configured via env vars)
    Projects:
      - Name: "${projectName}"
        RoleAssertion: true
        RoleCheck: true
        HasProjectCheck: true
        PrivateLabelingSetting: PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY
    # Service account for automated provisioning
    Machine:
      Machine:
        Username: "app-provisioner"
        Name: "${projectName} Provisioning Service"
      MachineKey:
        Type: 1  # JSON format
      Pat:
        # Personal Access Token with extended validity (1 year)
        ExpirationDate: "2025-12-31T23:59:59Z"
`

  const outputPath = join(process.cwd(), 'deployment', 'zitadel', 'init-steps.yaml')
  await writeFile(outputPath, initStepsContent)
  
  console.log(`‚úÖ Generated init-steps.yaml with domain: ${authDomain}`)
}

// Run if called directly
if (import.meta.main) {
  generateInitSteps().catch((error) => {
    console.error('‚ùå Failed to generate init-steps.yaml:', error.message)
    process.exit(1)
  })
}

export { generateInitSteps }